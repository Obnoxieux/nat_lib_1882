// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Author defines model for Author.
type Author struct {
	// Id Unique identifier for the author
	Id int64 `json:"id"`

	// Name Author's name
	Name string `json:"name"`
}

// Book defines model for Book.
type Book struct {
	// Author Author name (redundant field, see authors relation)
	Author *string `json:"author"`

	// Authors Authors of the book
	Authors *[]Author `json:"authors,omitempty"`

	// Comment General comment
	Comment *string `json:"comment"`

	// EditorComment Editor's comment
	EditorComment *string `json:"editor_comment"`

	// Endowment Book endowment
	Endowment *Endowment `json:"endowment"`

	// Genre Book genre
	Genre *Genre `json:"genre"`

	// Id Unique identifier for the book
	Id int64 `json:"id"`

	// Manuscript Whether the book is a manuscript
	Manuscript *bool `json:"manuscript"`

	// Number Catalogue number
	Number int64 `json:"number"`

	// Print Whether the book is printed
	Print *bool `json:"print"`

	// Title Book title
	Title string `json:"title"`

	// Volume Volume information
	Volume *string `json:"volume"`
}

// Endowment defines model for Endowment.
type Endowment struct {
	// Id Unique identifier for the endowment
	Id int64 `json:"id"`

	// Name Endowment name
	Name string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	// Error Error code
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// Genre defines model for Genre.
type Genre struct {
	// Id Unique identifier for the genre
	Id int64 `json:"id"`

	// Name Genre name
	Name string `json:"name"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// GetAuthorsParams defines parameters for GetAuthors.
type GetAuthorsParams struct {
	// Search Generic free-text search term to filter authors. The only supported field that is searched is the author's name for now.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetBooksByAuthorParams defines parameters for GetBooksByAuthor.
type GetBooksByAuthorParams struct {
	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetBooksParams defines parameters for GetBooks.
type GetBooksParams struct {
	// Author Filter by author ID
	Author *int64 `form:"author,omitempty" json:"author,omitempty"`

	// Genre Filter by genre ID
	Genre *int64 `form:"genre,omitempty" json:"genre,omitempty"`

	// Endowment Filter by endowment ID
	Endowment *int64 `form:"endowment,omitempty" json:"endowment,omitempty"`

	// Manuscript Filter by manuscript status
	Manuscript *bool `form:"manuscript,omitempty" json:"manuscript,omitempty"`

	// Print Filter by print status
	Print *bool `form:"print,omitempty" json:"print,omitempty"`

	// Search Generic free-text search term to filter books
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetBooksByEndowmentParams defines parameters for GetBooksByEndowment.
type GetBooksByEndowmentParams struct {
	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetBooksByGenreParams defines parameters for GetBooksByGenre.
type GetBooksByGenreParams struct {
	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all authors
	// (GET /authors)
	GetAuthors(w http.ResponseWriter, r *http.Request, params GetAuthorsParams)
	// Get a specific author
	// (GET /authors/{id})
	GetAuthorById(w http.ResponseWriter, r *http.Request, id int64)
	// Get books by an author
	// (GET /authors/{id}/books)
	GetBooksByAuthor(w http.ResponseWriter, r *http.Request, id int64, params GetBooksByAuthorParams)
	// List all books
	// (GET /books)
	GetBooks(w http.ResponseWriter, r *http.Request, params GetBooksParams)
	// Get a specific book
	// (GET /books/{id})
	GetBookById(w http.ResponseWriter, r *http.Request, id int64)
	// List all endowments
	// (GET /endowments)
	GetEndowments(w http.ResponseWriter, r *http.Request)
	// Get a specific endowment
	// (GET /endowments/{id})
	GetEndowmentById(w http.ResponseWriter, r *http.Request, id int64)
	// Get books by endowment
	// (GET /endowments/{id}/books)
	GetBooksByEndowment(w http.ResponseWriter, r *http.Request, id int64, params GetBooksByEndowmentParams)
	// List all genres
	// (GET /genres)
	GetGenres(w http.ResponseWriter, r *http.Request)
	// Get a specific genre
	// (GET /genres/{id})
	GetGenreById(w http.ResponseWriter, r *http.Request, id int64)
	// Get books by genre
	// (GET /genres/{id}/books)
	GetBooksByGenre(w http.ResponseWriter, r *http.Request, id int64, params GetBooksByGenreParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAuthors operation middleware
func (siw *ServerInterfaceWrapper) GetAuthors(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthorsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthors(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAuthorById operation middleware
func (siw *ServerInterfaceWrapper) GetAuthorById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthorById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBooksByAuthor operation middleware
func (siw *ServerInterfaceWrapper) GetBooksByAuthor(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBooksByAuthorParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBooksByAuthor(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBooks operation middleware
func (siw *ServerInterfaceWrapper) GetBooks(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBooksParams

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	// ------------- Optional query parameter "genre" -------------

	err = runtime.BindQueryParameter("form", true, false, "genre", r.URL.Query(), &params.Genre)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "genre", Err: err})
		return
	}

	// ------------- Optional query parameter "endowment" -------------

	err = runtime.BindQueryParameter("form", true, false, "endowment", r.URL.Query(), &params.Endowment)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endowment", Err: err})
		return
	}

	// ------------- Optional query parameter "manuscript" -------------

	err = runtime.BindQueryParameter("form", true, false, "manuscript", r.URL.Query(), &params.Manuscript)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "manuscript", Err: err})
		return
	}

	// ------------- Optional query parameter "print" -------------

	err = runtime.BindQueryParameter("form", true, false, "print", r.URL.Query(), &params.Print)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "print", Err: err})
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBooks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBookById operation middleware
func (siw *ServerInterfaceWrapper) GetBookById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBookById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEndowments operation middleware
func (siw *ServerInterfaceWrapper) GetEndowments(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEndowments(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEndowmentById operation middleware
func (siw *ServerInterfaceWrapper) GetEndowmentById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEndowmentById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBooksByEndowment operation middleware
func (siw *ServerInterfaceWrapper) GetBooksByEndowment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBooksByEndowmentParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBooksByEndowment(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGenres operation middleware
func (siw *ServerInterfaceWrapper) GetGenres(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGenres(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGenreById operation middleware
func (siw *ServerInterfaceWrapper) GetGenreById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGenreById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBooksByGenre operation middleware
func (siw *ServerInterfaceWrapper) GetBooksByGenre(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBooksByGenreParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBooksByGenre(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/authors", wrapper.GetAuthors).Methods("GET")

	r.HandleFunc(options.BaseURL+"/authors/{id}", wrapper.GetAuthorById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/authors/{id}/books", wrapper.GetBooksByAuthor).Methods("GET")

	r.HandleFunc(options.BaseURL+"/books", wrapper.GetBooks).Methods("GET")

	r.HandleFunc(options.BaseURL+"/books/{id}", wrapper.GetBookById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/endowments", wrapper.GetEndowments).Methods("GET")

	r.HandleFunc(options.BaseURL+"/endowments/{id}", wrapper.GetEndowmentById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/endowments/{id}/books", wrapper.GetBooksByEndowment).Methods("GET")

	r.HandleFunc(options.BaseURL+"/genres", wrapper.GetGenres).Methods("GET")

	r.HandleFunc(options.BaseURL+"/genres/{id}", wrapper.GetGenreById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/genres/{id}/books", wrapper.GetBooksByGenre).Methods("GET")

	return r
}

type BadRequestJSONResponse Error

type InternalServerErrorJSONResponse Error

type NotFoundJSONResponse Error

type GetAuthorsRequestObject struct {
	Params GetAuthorsParams
}

type GetAuthorsResponseObject interface {
	VisitGetAuthorsResponse(w http.ResponseWriter) error
}

type GetAuthors200JSONResponse struct {
	Items  *[]Author `json:"items,omitempty"`
	Limit  *int      `json:"limit,omitempty"`
	Offset *int      `json:"offset,omitempty"`
	Total  *int      `json:"total,omitempty"`
}

func (response GetAuthors200JSONResponse) VisitGetAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthors400JSONResponse struct{ BadRequestJSONResponse }

func (response GetAuthors400JSONResponse) VisitGetAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAuthors500JSONResponse) VisitGetAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthorByIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetAuthorByIdResponseObject interface {
	VisitGetAuthorByIdResponse(w http.ResponseWriter) error
}

type GetAuthorById200JSONResponse Author

func (response GetAuthorById200JSONResponse) VisitGetAuthorByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthorById404JSONResponse struct{ NotFoundJSONResponse }

func (response GetAuthorById404JSONResponse) VisitGetAuthorByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthorById500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAuthorById500JSONResponse) VisitGetAuthorByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetBooksByAuthorRequestObject struct {
	Id     int64 `json:"id"`
	Params GetBooksByAuthorParams
}

type GetBooksByAuthorResponseObject interface {
	VisitGetBooksByAuthorResponse(w http.ResponseWriter) error
}

type GetBooksByAuthor200JSONResponse struct {
	Items  *[]Book `json:"items,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Total  *int    `json:"total,omitempty"`
}

func (response GetBooksByAuthor200JSONResponse) VisitGetBooksByAuthorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBooksByAuthor404JSONResponse struct{ NotFoundJSONResponse }

func (response GetBooksByAuthor404JSONResponse) VisitGetBooksByAuthorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetBooksByAuthor500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetBooksByAuthor500JSONResponse) VisitGetBooksByAuthorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetBooksRequestObject struct {
	Params GetBooksParams
}

type GetBooksResponseObject interface {
	VisitGetBooksResponse(w http.ResponseWriter) error
}

type GetBooks200JSONResponse struct {
	Items  *[]Book `json:"items,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`

	// Total Total number of books matching the criteria
	Total *int `json:"total,omitempty"`
}

func (response GetBooks200JSONResponse) VisitGetBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBooks400JSONResponse struct{ BadRequestJSONResponse }

func (response GetBooks400JSONResponse) VisitGetBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetBooks500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetBooks500JSONResponse) VisitGetBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetBookByIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetBookByIdResponseObject interface {
	VisitGetBookByIdResponse(w http.ResponseWriter) error
}

type GetBookById200JSONResponse Book

func (response GetBookById200JSONResponse) VisitGetBookByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBookById404JSONResponse struct{ NotFoundJSONResponse }

func (response GetBookById404JSONResponse) VisitGetBookByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetBookById500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetBookById500JSONResponse) VisitGetBookByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEndowmentsRequestObject struct {
}

type GetEndowmentsResponseObject interface {
	VisitGetEndowmentsResponse(w http.ResponseWriter) error
}

type GetEndowments200JSONResponse []Endowment

func (response GetEndowments200JSONResponse) VisitGetEndowmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEndowments500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetEndowments500JSONResponse) VisitGetEndowmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEndowmentByIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetEndowmentByIdResponseObject interface {
	VisitGetEndowmentByIdResponse(w http.ResponseWriter) error
}

type GetEndowmentById200JSONResponse Endowment

func (response GetEndowmentById200JSONResponse) VisitGetEndowmentByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEndowmentById404JSONResponse struct{ NotFoundJSONResponse }

func (response GetEndowmentById404JSONResponse) VisitGetEndowmentByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEndowmentById500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetEndowmentById500JSONResponse) VisitGetEndowmentByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetBooksByEndowmentRequestObject struct {
	Id     int64 `json:"id"`
	Params GetBooksByEndowmentParams
}

type GetBooksByEndowmentResponseObject interface {
	VisitGetBooksByEndowmentResponse(w http.ResponseWriter) error
}

type GetBooksByEndowment200JSONResponse struct {
	Items  *[]Book `json:"items,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Total  *int    `json:"total,omitempty"`
}

func (response GetBooksByEndowment200JSONResponse) VisitGetBooksByEndowmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBooksByEndowment404JSONResponse struct{ NotFoundJSONResponse }

func (response GetBooksByEndowment404JSONResponse) VisitGetBooksByEndowmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetBooksByEndowment500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetBooksByEndowment500JSONResponse) VisitGetBooksByEndowmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetGenresRequestObject struct {
}

type GetGenresResponseObject interface {
	VisitGetGenresResponse(w http.ResponseWriter) error
}

type GetGenres200JSONResponse []Genre

func (response GetGenres200JSONResponse) VisitGetGenresResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGenres500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetGenres500JSONResponse) VisitGetGenresResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetGenreByIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetGenreByIdResponseObject interface {
	VisitGetGenreByIdResponse(w http.ResponseWriter) error
}

type GetGenreById200JSONResponse Genre

func (response GetGenreById200JSONResponse) VisitGetGenreByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGenreById404JSONResponse struct{ NotFoundJSONResponse }

func (response GetGenreById404JSONResponse) VisitGetGenreByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetGenreById500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetGenreById500JSONResponse) VisitGetGenreByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetBooksByGenreRequestObject struct {
	Id     int64 `json:"id"`
	Params GetBooksByGenreParams
}

type GetBooksByGenreResponseObject interface {
	VisitGetBooksByGenreResponse(w http.ResponseWriter) error
}

type GetBooksByGenre200JSONResponse struct {
	Items  *[]Book `json:"items,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Total  *int    `json:"total,omitempty"`
}

func (response GetBooksByGenre200JSONResponse) VisitGetBooksByGenreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBooksByGenre404JSONResponse struct{ NotFoundJSONResponse }

func (response GetBooksByGenre404JSONResponse) VisitGetBooksByGenreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetBooksByGenre500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetBooksByGenre500JSONResponse) VisitGetBooksByGenreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all authors
	// (GET /authors)
	GetAuthors(ctx context.Context, request GetAuthorsRequestObject) (GetAuthorsResponseObject, error)
	// Get a specific author
	// (GET /authors/{id})
	GetAuthorById(ctx context.Context, request GetAuthorByIdRequestObject) (GetAuthorByIdResponseObject, error)
	// Get books by an author
	// (GET /authors/{id}/books)
	GetBooksByAuthor(ctx context.Context, request GetBooksByAuthorRequestObject) (GetBooksByAuthorResponseObject, error)
	// List all books
	// (GET /books)
	GetBooks(ctx context.Context, request GetBooksRequestObject) (GetBooksResponseObject, error)
	// Get a specific book
	// (GET /books/{id})
	GetBookById(ctx context.Context, request GetBookByIdRequestObject) (GetBookByIdResponseObject, error)
	// List all endowments
	// (GET /endowments)
	GetEndowments(ctx context.Context, request GetEndowmentsRequestObject) (GetEndowmentsResponseObject, error)
	// Get a specific endowment
	// (GET /endowments/{id})
	GetEndowmentById(ctx context.Context, request GetEndowmentByIdRequestObject) (GetEndowmentByIdResponseObject, error)
	// Get books by endowment
	// (GET /endowments/{id}/books)
	GetBooksByEndowment(ctx context.Context, request GetBooksByEndowmentRequestObject) (GetBooksByEndowmentResponseObject, error)
	// List all genres
	// (GET /genres)
	GetGenres(ctx context.Context, request GetGenresRequestObject) (GetGenresResponseObject, error)
	// Get a specific genre
	// (GET /genres/{id})
	GetGenreById(ctx context.Context, request GetGenreByIdRequestObject) (GetGenreByIdResponseObject, error)
	// Get books by genre
	// (GET /genres/{id}/books)
	GetBooksByGenre(ctx context.Context, request GetBooksByGenreRequestObject) (GetBooksByGenreResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAuthors operation middleware
func (sh *strictHandler) GetAuthors(w http.ResponseWriter, r *http.Request, params GetAuthorsParams) {
	var request GetAuthorsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthors(ctx, request.(GetAuthorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAuthorsResponseObject); ok {
		if err := validResponse.VisitGetAuthorsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAuthorById operation middleware
func (sh *strictHandler) GetAuthorById(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetAuthorByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthorById(ctx, request.(GetAuthorByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthorById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAuthorByIdResponseObject); ok {
		if err := validResponse.VisitGetAuthorByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBooksByAuthor operation middleware
func (sh *strictHandler) GetBooksByAuthor(w http.ResponseWriter, r *http.Request, id int64, params GetBooksByAuthorParams) {
	var request GetBooksByAuthorRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBooksByAuthor(ctx, request.(GetBooksByAuthorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBooksByAuthor")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBooksByAuthorResponseObject); ok {
		if err := validResponse.VisitGetBooksByAuthorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBooks operation middleware
func (sh *strictHandler) GetBooks(w http.ResponseWriter, r *http.Request, params GetBooksParams) {
	var request GetBooksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBooks(ctx, request.(GetBooksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBooks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBooksResponseObject); ok {
		if err := validResponse.VisitGetBooksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBookById operation middleware
func (sh *strictHandler) GetBookById(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetBookByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBookById(ctx, request.(GetBookByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBookById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBookByIdResponseObject); ok {
		if err := validResponse.VisitGetBookByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEndowments operation middleware
func (sh *strictHandler) GetEndowments(w http.ResponseWriter, r *http.Request) {
	var request GetEndowmentsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEndowments(ctx, request.(GetEndowmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEndowments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEndowmentsResponseObject); ok {
		if err := validResponse.VisitGetEndowmentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEndowmentById operation middleware
func (sh *strictHandler) GetEndowmentById(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetEndowmentByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEndowmentById(ctx, request.(GetEndowmentByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEndowmentById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEndowmentByIdResponseObject); ok {
		if err := validResponse.VisitGetEndowmentByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBooksByEndowment operation middleware
func (sh *strictHandler) GetBooksByEndowment(w http.ResponseWriter, r *http.Request, id int64, params GetBooksByEndowmentParams) {
	var request GetBooksByEndowmentRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBooksByEndowment(ctx, request.(GetBooksByEndowmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBooksByEndowment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBooksByEndowmentResponseObject); ok {
		if err := validResponse.VisitGetBooksByEndowmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGenres operation middleware
func (sh *strictHandler) GetGenres(w http.ResponseWriter, r *http.Request) {
	var request GetGenresRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGenres(ctx, request.(GetGenresRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGenres")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGenresResponseObject); ok {
		if err := validResponse.VisitGetGenresResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGenreById operation middleware
func (sh *strictHandler) GetGenreById(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetGenreByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGenreById(ctx, request.(GetGenreByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGenreById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGenreByIdResponseObject); ok {
		if err := validResponse.VisitGetGenreByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBooksByGenre operation middleware
func (sh *strictHandler) GetBooksByGenre(w http.ResponseWriter, r *http.Request, id int64, params GetBooksByGenreParams) {
	var request GetBooksByGenreRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBooksByGenre(ctx, request.(GetBooksByGenreRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBooksByGenre")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBooksByGenreResponseObject); ok {
		if err := validResponse.VisitGetBooksByGenreResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
