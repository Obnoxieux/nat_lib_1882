/* tslint:disable */
/* eslint-disable */
/**
 * National Library Catalogue 1882 API
 * REST API for accessing historical Damascus National Library catalogue data from its inception in 1882. This API provides read-only access to books, authors, genres, and endowments  from the original documentary source. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Endowment,
  GetBooksByAuthor200Response,
} from '../models/index';
import {
    EndowmentFromJSON,
    EndowmentToJSON,
    GetBooksByAuthor200ResponseFromJSON,
    GetBooksByAuthor200ResponseToJSON,
} from '../models/index';

export interface GetBooksByEndowmentRequest {
    id: number;
    limit?: number;
    offset?: number;
}

export interface GetEndowmentByIdRequest {
    id: number;
}

/**
 * 
 */
export class EndowmentsApi extends runtime.BaseAPI {

    /**
     * Retrieve all books from a specific endowment
     * Get books by endowment
     */
    async getBooksByEndowmentRaw(requestParameters: GetBooksByEndowmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBooksByAuthor200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBooksByEndowment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/endowments/{id}/books`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBooksByAuthor200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all books from a specific endowment
     * Get books by endowment
     */
    async getBooksByEndowment(requestParameters: GetBooksByEndowmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBooksByAuthor200Response> {
        const response = await this.getBooksByEndowmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve details of a specific endowment by ID
     * Get a specific endowment
     */
    async getEndowmentByIdRaw(requestParameters: GetEndowmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Endowment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getEndowmentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/endowments/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EndowmentFromJSON(jsonValue));
    }

    /**
     * Retrieve details of a specific endowment by ID
     * Get a specific endowment
     */
    async getEndowmentById(requestParameters: GetEndowmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Endowment> {
        const response = await this.getEndowmentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all endowments in the catalogue
     * List all endowments
     */
    async getEndowmentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Endowment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/endowments`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EndowmentFromJSON));
    }

    /**
     * Retrieve a list of all endowments in the catalogue
     * List all endowments
     */
    async getEndowments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Endowment>> {
        const response = await this.getEndowmentsRaw(initOverrides);
        return await response.value();
    }

}
