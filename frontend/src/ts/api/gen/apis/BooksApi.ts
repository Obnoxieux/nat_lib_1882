/* tslint:disable */
/* eslint-disable */
/**
 * National Library Catalogue 1882 API
 * REST API for accessing historical Damascus National Library catalogue data from its inception in 1882. This API provides read-only access to books, authors, genres, and endowments  from the original documentary source. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Book,
  GetBooks200Response,
} from '../models/index';
import {
    BookFromJSON,
    BookToJSON,
    GetBooks200ResponseFromJSON,
    GetBooks200ResponseToJSON,
} from '../models/index';

export interface GetBookByIdRequest {
    id: number;
}

export interface GetBooksRequest {
    genre?: number;
    endowment?: number;
    manuscript?: boolean;
    print?: boolean;
    search?: string;
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class BooksApi extends runtime.BaseAPI {

    /**
     * Retrieve details of a specific book by ID
     * Get a specific book
     */
    async getBookByIdRaw(requestParameters: GetBookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Book>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBookById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookFromJSON(jsonValue));
    }

    /**
     * Retrieve details of a specific book by ID
     * Get a specific book
     */
    async getBookById(requestParameters: GetBookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Book> {
        const response = await this.getBookByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all books in the catalogue
     * List all books
     */
    async getBooksRaw(requestParameters: GetBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBooks200Response>> {
        const queryParameters: any = {};

        if (requestParameters['genre'] != null) {
            queryParameters['genre'] = requestParameters['genre'];
        }

        if (requestParameters['endowment'] != null) {
            queryParameters['endowment'] = requestParameters['endowment'];
        }

        if (requestParameters['manuscript'] != null) {
            queryParameters['manuscript'] = requestParameters['manuscript'];
        }

        if (requestParameters['print'] != null) {
            queryParameters['print'] = requestParameters['print'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBooks200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all books in the catalogue
     * List all books
     */
    async getBooks(requestParameters: GetBooksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBooks200Response> {
        const response = await this.getBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
