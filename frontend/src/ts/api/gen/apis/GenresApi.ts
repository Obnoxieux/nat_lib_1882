/* tslint:disable */
/* eslint-disable */
/**
 * National Library Catalogue 1882 API
 * REST API for accessing historical Damascus National Library catalogue data from its inception in 1882. This API provides read-only access to books, authors, genres, and endowments  from the original documentary source. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Genre,
  GetBooksByAuthor200Response,
} from '../models/index';
import {
    GenreFromJSON,
    GenreToJSON,
    GetBooksByAuthor200ResponseFromJSON,
    GetBooksByAuthor200ResponseToJSON,
} from '../models/index';

export interface GetBooksByGenreRequest {
    id: number;
    limit?: number;
    offset?: number;
}

export interface GetGenreByIdRequest {
    id: number;
}

/**
 * 
 */
export class GenresApi extends runtime.BaseAPI {

    /**
     * Retrieve all books in a specific genre
     * Get books by genre
     */
    async getBooksByGenreRaw(requestParameters: GetBooksByGenreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBooksByAuthor200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBooksByGenre().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genres/{id}/books`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBooksByAuthor200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all books in a specific genre
     * Get books by genre
     */
    async getBooksByGenre(requestParameters: GetBooksByGenreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBooksByAuthor200Response> {
        const response = await this.getBooksByGenreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve details of a specific genre by ID
     * Get a specific genre
     */
    async getGenreByIdRaw(requestParameters: GetGenreByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Genre>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getGenreById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genres/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenreFromJSON(jsonValue));
    }

    /**
     * Retrieve details of a specific genre by ID
     * Get a specific genre
     */
    async getGenreById(requestParameters: GetGenreByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Genre> {
        const response = await this.getGenreByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all genres in the catalogue
     * List all genres
     */
    async getGenresRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Genre>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genres`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GenreFromJSON));
    }

    /**
     * Retrieve a list of all genres in the catalogue
     * List all genres
     */
    async getGenres(initOverrides?: RequestInit | runtime.InitOverrideFunction, p0?: { signal: AbortSignal; }): Promise<Array<Genre>> {
        const response = await this.getGenresRaw(initOverrides);
        return await response.value();
    }

}
