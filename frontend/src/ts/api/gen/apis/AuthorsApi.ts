/* tslint:disable */
/* eslint-disable */
/**
 * National Library Catalogue 1882 API
 * REST API for accessing historical Damascus National Library catalogue data from its inception in 1882. This API provides read-only access to books, authors, genres, and endowments  from the original documentary source. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Author,
  GetAuthors200Response,
  GetBooksByAuthor200Response,
} from '../models/index';
import {
    AuthorFromJSON,
    AuthorToJSON,
    GetAuthors200ResponseFromJSON,
    GetAuthors200ResponseToJSON,
    GetBooksByAuthor200ResponseFromJSON,
    GetBooksByAuthor200ResponseToJSON,
} from '../models/index';

export interface GetAuthorByIdRequest {
    id: number;
}

export interface GetAuthorsRequest {
    search?: string;
    limit?: number;
    offset?: number;
}

export interface GetBooksByAuthorRequest {
    id: number;
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class AuthorsApi extends runtime.BaseAPI {

    /**
     * Retrieve details of a specific author by ID
     * Get a specific author
     */
    async getAuthorByIdRaw(requestParameters: GetAuthorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Author>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAuthorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/authors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorFromJSON(jsonValue));
    }

    /**
     * Retrieve details of a specific author by ID
     * Get a specific author
     */
    async getAuthorById(requestParameters: GetAuthorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Author> {
        const response = await this.getAuthorByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all authors in the catalogue
     * List all authors
     */
    async getAuthorsRaw(requestParameters: GetAuthorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAuthors200Response>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/authors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAuthors200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all authors in the catalogue
     * List all authors
     */
    async getAuthors(requestParameters: GetAuthorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAuthors200Response> {
        const response = await this.getAuthorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all books written by a specific author
     * Get books by an author
     */
    async getBooksByAuthorRaw(requestParameters: GetBooksByAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBooksByAuthor200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBooksByAuthor().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/authors/{id}/books`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBooksByAuthor200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all books written by a specific author
     * Get books by an author
     */
    async getBooksByAuthor(requestParameters: GetBooksByAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBooksByAuthor200Response> {
        const response = await this.getBooksByAuthorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
