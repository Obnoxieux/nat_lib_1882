/* tslint:disable */
/* eslint-disable */
/**
 * National Library Catalogue 1882 API
 * REST API for accessing historical Damascus National Library catalogue data from its inception in 1882. This API provides read-only access to books, authors, genres, and endowments  from the original documentary source. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Author } from './Author';
import {
    AuthorFromJSON,
    AuthorFromJSONTyped,
    AuthorToJSON,
    AuthorToJSONTyped,
} from './Author';
import type { Genre } from './Genre';
import {
    GenreFromJSON,
    GenreFromJSONTyped,
    GenreToJSON,
    GenreToJSONTyped,
} from './Genre';
import type { Endowment } from './Endowment';
import {
    EndowmentFromJSON,
    EndowmentFromJSONTyped,
    EndowmentToJSON,
    EndowmentToJSONTyped,
} from './Endowment';

/**
 * 
 * @export
 * @interface Book
 */
export interface Book {
    /**
     * Unique identifier for the book
     * @type {number}
     * @memberof Book
     */
    id: number;
    /**
     * Catalogue number
     * @type {number}
     * @memberof Book
     */
    number: number;
    /**
     * Book title
     * @type {string}
     * @memberof Book
     */
    title: string;
    /**
     * Whether the book is a manuscript
     * @type {boolean}
     * @memberof Book
     */
    manuscript: boolean;
    /**
     * Whether the book is printed
     * @type {boolean}
     * @memberof Book
     */
    print: boolean;
    /**
     * Original comment in the source document
     * @type {string}
     * @memberof Book
     */
    comment?: string;
    /**
     * Editor's comment
     * @type {string}
     * @memberof Book
     */
    editorComment?: string;
    /**
     * Volume information
     * @type {string}
     * @memberof Book
     */
    volume?: string;
    /**
     * Book genre
     * @type {Genre}
     * @memberof Book
     */
    genre: Genre;
    /**
     * Book endowment
     * @type {Endowment}
     * @memberof Book
     */
    endowment: Endowment;
    /**
     * Authors of the book
     * @type {Array<Author>}
     * @memberof Book
     */
    authors?: Array<Author>;
}

/**
 * Check if a given object implements the Book interface.
 */
export function instanceOfBook(value: object): value is Book {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('number' in value) || value['number'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('manuscript' in value) || value['manuscript'] === undefined) return false;
    if (!('print' in value) || value['print'] === undefined) return false;
    if (!('genre' in value) || value['genre'] === undefined) return false;
    if (!('endowment' in value) || value['endowment'] === undefined) return false;
    return true;
}

export function BookFromJSON(json: any): Book {
    return BookFromJSONTyped(json, false);
}

export function BookFromJSONTyped(json: any, ignoreDiscriminator: boolean): Book {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'number': json['number'],
        'title': json['title'],
        'manuscript': json['manuscript'],
        'print': json['print'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'editorComment': json['editor_comment'] == null ? undefined : json['editor_comment'],
        'volume': json['volume'] == null ? undefined : json['volume'],
        'genre': GenreFromJSON(json['genre']),
        'endowment': EndowmentFromJSON(json['endowment']),
        'authors': json['authors'] == null ? undefined : ((json['authors'] as Array<any>).map(AuthorFromJSON)),
    };
}

export function BookToJSON(json: any): Book {
    return BookToJSONTyped(json, false);
}

export function BookToJSONTyped(value?: Book | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'number': value['number'],
        'title': value['title'],
        'manuscript': value['manuscript'],
        'print': value['print'],
        'comment': value['comment'],
        'editor_comment': value['editorComment'],
        'volume': value['volume'],
        'genre': GenreToJSON(value['genre']),
        'endowment': EndowmentToJSON(value['endowment']),
        'authors': value['authors'] == null ? undefined : ((value['authors'] as Array<any>).map(AuthorToJSON)),
    };
}

